openapi: 3.0.3
info:
  title: Bank Card Management System API
  description: REST API for managing bank cards with JWT authentication and authorization
  version: 1.0.0
  contact:
    name: Bank API Support
    email: support@bank.com

servers:
  - url: http://localhost:8080/api
    description: Development server

tags:
  - name: Authentication
    description: User registration and login
  - name: Cards
    description: Bank cards management
  - name: Transfers
    description: Money transfers between cards
  - name: Users
    description: User management (Admin only)

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards:
    get:
      tags:
        - Cards
      summary: Get user cards
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of user cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardPageResponse'
        '403':
          description: Forbidden

    post:
      tags:
        - Cards
      summary: Create new card (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequest'
      responses:
        '201':
          description: Card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '403':
          description: Forbidden

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication schemas
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "user123"
        password:
          type: string
          format: password
          example: "password123"

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          example: "user123"
        password:
          type: string
          format: password
          example: "password123"
        email:
          type: string
          format: email
          example: "user@example.com"

    JwtResponse:
      type: object
      properties:
        token:
          type: string
        tokenType:
          type: string
          example: "Bearer"
        username:
          type: string
        role:
          type: string
        expiresIn:
          type: integer

    # Card schemas
    CardDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        cardNumber:
          type: string
          example: "**** **** **** 1234"
        cardHolder:
          type: string
          example: "John Doe"
        expirationDate:
          type: string
          format: date
          example: "2025-12-31"
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
          example: "ACTIVE"
        balance:
          type: number
          format: double
          example: 1000.50

    CreateCardRequest:
      type: object
      required:
        - cardNumber
        - cardHolder
        - expirationDate
      properties:
        cardNumber:
          type: string
          example: "1234567812345678"
        cardHolder:
          type: string
          example: "John Doe"
        expirationDate:
          type: string
          format: date
          example: "2025-12-31"

    CardPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDto'
        totalPages:
          type: integer
        totalElements:
          type: integer
        size:
          type: integer
        number:
          type: integer

    # Common schemas
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string

security:
  - BearerAuth: []